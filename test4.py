# coding=utf-8

# 小样本验证 有效性
from __future__ import print_function
import numpy as np
import torch

import os
import shutil
import pickle as pkl
import argparse

from neural.util import Trainer, Loader
from neural.models import BiLSTM
from neural.models import CNN

from active_learning.acquisition import Acquisition
from active_learning.chartTool import *

torch.manual_seed(0)
np.random.seed(0)


def parse_args():
    parser = argparse.ArgumentParser(description='command for the first train')

    parser.add_argument('--answer_count', type=int, default=5, help='the amount of answer for each quesiton')
    parser.add_argument('--num_epochs', type=int, default=20, help='training epoch')
    parser.add_argument('--use_pretrained_word_embedding', type=bool, default=True, help='')
    parser.add_argument('--batch_size', type=int, default=1024, help='')
    parser.add_argument('--sampling_batch_size', type=int, default=512, help='')
    parser.add_argument('--with_sim_feature', type=bool, default=True, help='whether use sim_feature in deep model')
    parser.add_argument('--word_embedding_dim', type=int, default=300, help='')
    parser.add_argument('--pretrained_word_embedding', default="../../datasets/rcv2/glove.6B.300d.txt", help='')
    parser.add_argument('--dropout', type=float, default=0.5, help='')
    parser.add_argument('--word_hidden_dim', type=int, default=75, help='')
    parser.add_argument('--learning_rate', type=float, default=1e-3, help='')
    parser.add_argument('--target_size', type=int, default=103, help='rcv2:103 ')
    parser.add_argument('--top_k', type=int, default=40, help='rcv2:40 , eurLex:100')
    parser.add_argument('--word_out_channels', type=int, default=200, help='')
    parser.add_argument('--result_path', default="result/rcv2/",help='')
    parser.add_argument('--device', type=int, default=[0], help='')
    parser.add_argument('--cal_Aleatoric_uncertainty', type=bool, default=False, help='')
    parser.add_argument('--sampling_number', type=int, default=1, help='')

    args = parser.parse_args()
    return args


####################################################################################################
#############################              active learning               ###########################
def main(args):

    task_seq = [
        # The config for a task:
        # acquire_method(sub_acquire_method): random(""), no-dete("DAL","BALD"), dete("coreset","entropy",...)
        # "../../datasets/answer_selection/YahooCQA/data/data-FD/"

        {"model_name": "CNN",
         "group_name": "[mlabs]CNN+DAL+3e4trn",
         "max_performance": 0.80,
         "data_path": "../../datasets/rcv2/",
         "acquire_method": "no-dete",
         "sub_acquire_method": "DAL",
         "unsupervised_method": 'submodular',
         "submodular_k": 2,
         "num_acquisitions_round": 10,
         "init_question_num": 20,
         "acquire_question_num_per_round": 20,
         "warm_start_random_seed": 64,
         "sample_method": "No-Deterministic+DAL+64",
        },

        {
            "model_name": "CNN",
            "group_name": "[mlabs]CNN+DAL+3e4trn",
            "max_performance": 0.80,
            "data_path": "../../datasets/rcv2/",
            "acquire_method": "random",
            "sub_acquire_method": "random",
            "unsupervised_method": 'submodular',
            "submodular_k": 2,
            "num_acquisitions_round": 10,
            "init_question_num": 20,
            "acquire_question_num_per_round": 20,
            "warm_start_random_seed": 64,
            "sample_method": "No-Deterministic+random+64",
        },


    ]

    allMethods_results = []   #Record the performance results of each method during active learning

    for config in task_seq:

        print("-------------------{}-{}-------------------".format(config["group_name"], config["sample_method"]))

        ####################################### initial setting ###########################################
        data_path = config["data_path"]
        model_name = config["model_name"] if "model_name" in config else 'CNN'
        num_acquisitions_round = config["num_acquisitions_round"]
        acquire_method = config["acquire_method"]
        sub_acquire_method = config["sub_acquire_method"]
        init_question_num = config["init_question_num"] if "init_question_num" in config else 800 # number of initial training samples
        acquire_question_num_per_round = config["acquire_question_num_per_round"] if "acquire_question_num_per_round" in config else 100 #Number of samples collected per round
        warm_start_random_seed = config["warm_start_random_seed"]  # the random seed for selecting the initial training set
        sample_method = config["sample_method"]

        loader = Loader()

        print('model:', model_name)
        print('dataset:', data_path)
        print('acquisition method:', acquire_method, "+", sub_acquire_method)

        if not os.path.exists(args.result_path):
            os.makedirs(args.result_path)

        if not os.path.exists(os.path.join(args.result_path, model_name)):
            os.makedirs(os.path.join(args.result_path, model_name))

        if not os.path.exists(os.path.join(args.result_path, model_name, 'active_checkpoint', acquire_method)):
            os.makedirs(os.path.join(args.result_path, model_name, 'active_checkpoint', acquire_method))

        data = loader.load_rcv2(data_path)

        train_data = data['train_points']
        val_data = data['test_points']

        # print("trn_index = ", sorted(get_pointed_label_data(all_train_data, range(10, 50), 4000)))
        # print("tst_index = ", sorted(get_pointed_label_data(all_val_data, range(10, 50), wanted_num=400)))
        trn_data_index = trn_index =  [7, 17, 18, 24, 28, 29, 57, 59, 68, 71, 79, 116, 126, 131, 133, 135, 166, 169, 188, 198, 201, 205, 207, 208, 214, 216, 222, 228, 234, 246, 253, 280, 282, 285, 295, 298, 305, 307, 313, 316, 320, 321, 322, 324, 339, 349, 352, 353, 359, 361, 374, 375, 389, 394, 402, 405, 406, 414, 421, 423, 426, 427, 428, 430, 431, 432, 442, 460, 469, 476, 481, 482, 489, 492, 502, 510, 515, 528, 529, 536, 547, 550, 555, 569, 571, 582, 589, 602, 605, 608, 609, 611, 639, 644, 650, 662, 688, 690, 700, 712, 713, 715, 734, 739, 744, 747, 763, 769, 775, 776, 781, 793, 794, 803, 816, 822, 834, 835, 841, 842, 844, 853, 855, 869, 871, 875, 887, 896, 918, 925, 928, 930, 960, 966, 979, 987, 1002, 1006, 1009, 1010, 1024, 1034, 1035, 1040, 1046, 1065, 1066, 1084, 1090, 1108, 1115, 1116, 1131, 1135, 1145, 1146, 1150, 1156, 1158, 1168, 1183, 1185, 1191, 1194, 1195, 1215, 1216, 1231, 1239, 1247, 1256, 1258, 1276, 1277, 1279, 1290, 1302, 1304, 1306, 1312, 1313, 1353, 1358, 1361, 1367, 1375, 1376, 1377, 1384, 1386, 1387, 1390, 1400, 1415, 1433, 1436, 1453, 1470, 1471, 1476, 1483, 1495, 1508, 1509, 1517, 1548, 1560, 1571, 1576, 1588, 1613, 1618, 1623, 1626, 1627, 1641, 1644, 1651, 1653, 1656, 1660, 1661, 1662, 1684, 1687, 1692, 1713, 1718, 1726, 1738, 1746, 1759, 1778, 1781, 1811, 1814, 1822, 1827, 1828, 1833, 1836, 1839, 1846, 1868, 1872, 1875, 1876, 1895, 1909, 1923, 1929, 1933, 1935, 1964, 1976, 1986, 1993, 1995, 2001, 2013, 2015, 2027, 2046, 2051, 2052, 2053, 2075, 2080, 2084, 2102, 2122, 2129, 2132, 2136, 2142, 2150, 2151, 2155, 2159, 2164, 2171, 2186, 2207, 2233, 2238, 2239, 2246, 2252, 2270, 2274, 2276, 2281, 2297, 2298, 2319, 2321, 2324, 2330, 2343, 2357, 2360, 2361, 2374, 2376, 2400, 2409, 2410, 2414, 2416, 2433, 2438, 2439, 2443, 2451, 2453, 2458, 2465, 2475, 2493, 2494, 2509, 2510, 2513, 2514, 2515, 2518, 2525, 2532, 2533, 2534, 2535, 2548, 2557, 2559, 2564, 2566, 2575, 2576, 2589, 2594, 2595, 2615, 2618, 2652, 2664, 2665, 2667, 2676, 2677, 2696, 2697, 2714, 2715, 2731, 2743, 2748, 2752, 2760, 2773, 2775, 2777, 2788, 2796, 2798, 2807, 2811, 2812, 2828, 2829, 2832, 2838, 2841, 2843, 2851, 2857, 2860, 2877, 2878, 2883, 2894, 2896, 2897, 2921, 2943, 2944, 2971, 2974, 2975, 2994, 3003, 3004, 3028, 3037, 3039, 3046, 3051, 3060, 3068, 3069, 3081, 3089, 3096, 3118, 3134, 3144, 3145, 3146, 3182, 3191, 3193, 3195, 3200, 3219, 3227, 3244, 3252, 3266, 3268, 3270, 3273, 3285, 3298, 3304, 3316, 3320, 3321, 3322, 3325, 3326, 3330, 3333, 3345, 3357, 3364, 3369, 3372, 3382, 3384, 3394, 3400, 3407, 3421, 3422, 3432, 3434, 3436, 3445, 3451, 3457, 3461, 3485, 3486, 3489, 3498, 3500, 3504, 3509, 3510, 3511, 3520, 3521, 3525, 3528, 3553, 3554, 3561, 3571, 3580, 3582, 3585, 3588, 3590, 3594, 3597, 3601, 3605, 3633, 3634, 3650, 3651, 3663, 3689, 3698, 3711, 3719, 3720, 3737, 3742, 3743, 3744, 3750, 3754, 3762, 3782, 3790, 3800, 3811, 3814, 3821, 3834, 3838, 3849, 3853, 3873, 3882, 3886, 3887, 3888, 3890, 3891, 3910, 3913, 3915, 3924, 3925, 3926, 3935, 3943, 3952, 3959, 3960, 3971, 3973, 3978, 3979, 3981, 3983, 3987, 3991, 3996, 4001, 4003, 4018, 4020, 4023, 4025, 4030, 4033, 4041, 4060, 4066, 4083, 4085, 4086, 4091, 4095, 4096, 4103, 4108, 4117, 4129, 4138, 4146, 4147, 4157, 4163, 4173, 4187, 4198, 4202, 4204, 4207, 4219, 4221, 4222, 4231, 4233, 4234, 4236, 4241, 4246, 4251, 4276, 4277, 4290, 4291, 4292, 4294, 4295, 4307, 4310, 4327, 4351, 4354, 4360, 4367, 4400, 4402, 4406, 4424, 4427, 4439, 4440, 4441, 4452, 4453, 4455, 4465, 4467, 4475, 4483, 4503, 4506, 4512, 4525, 4527, 4529, 4549, 4558, 4562, 4563, 4564, 4578, 4582, 4590, 4599, 4605, 4606, 4610, 4612, 4614, 4638, 4639, 4641, 4642, 4655, 4663, 4669, 4673, 4682, 4698, 4700, 4704, 4735, 4739, 4743, 4748, 4753, 4770, 4781, 4786, 4791, 4792, 4832, 4841, 4854, 4909, 4914, 4927, 4931, 4933, 4939, 4945, 4958, 4968, 4971, 4974, 4979, 5006, 5019, 5026, 5027, 5030, 5042, 5054, 5063, 5073, 5084, 5085, 5091, 5096, 5097, 5103, 5104, 5105, 5119, 5123, 5128, 5135, 5136, 5145, 5149, 5150, 5154, 5156, 5192, 5196, 5200, 5207, 5210, 5216, 5225, 5243, 5246, 5253, 5267, 5268, 5272, 5274, 5275, 5278, 5279, 5290, 5295, 5301, 5315, 5322, 5324, 5326, 5327, 5330, 5333, 5338, 5345, 5347, 5351, 5359, 5376, 5385, 5390, 5396, 5400, 5401, 5415, 5420, 5421, 5424, 5430, 5434, 5435, 5444, 5446, 5448, 5449, 5450, 5460, 5462, 5468, 5484, 5489, 5500, 5512, 5515, 5520, 5522, 5523, 5530, 5541, 5544, 5546, 5552, 5553, 5554, 5573, 5584, 5590, 5592, 5594, 5596, 5600, 5608, 5619, 5620, 5623, 5626, 5629, 5630, 5654, 5668, 5674, 5675, 5694, 5709, 5716, 5730, 5756, 5758, 5779, 5788, 5791, 5808, 5819, 5826, 5827, 5829, 5839, 5859, 5864, 5879, 5891, 5894, 5897, 5912, 5915, 5916, 5917, 5918, 5924, 5926, 5929, 5930, 5938, 5942, 5945, 5950, 5952, 5961, 5968, 6014, 6016, 6022, 6027, 6030, 6042, 6043, 6057, 6082, 6086, 6092, 6098, 6102, 6104, 6110, 6120, 6126, 6127, 6133, 6145, 6146, 6148, 6160, 6164, 6168, 6170, 6187, 6190, 6196, 6197, 6210, 6211, 6223, 6229, 6233, 6235, 6236, 6239, 6271, 6277, 6281, 6287, 6292, 6300, 6307, 6320, 6336, 6355, 6357, 6358, 6374, 6396, 6401, 6420, 6443, 6445, 6446, 6449, 6455, 6467, 6473, 6497, 6502, 6503, 6516, 6523, 6525, 6526, 6528, 6532, 6534, 6545, 6552, 6555, 6556, 6563, 6572, 6580, 6594, 6599, 6601, 6603, 6610, 6615, 6618, 6622, 6623, 6639, 6642, 6644, 6664, 6673, 6683, 6684, 6686, 6693, 6709, 6727, 6729, 6732, 6735, 6736, 6745, 6751, 6754, 6771, 6780, 6782, 6797, 6800, 6818, 6827, 6837, 6838, 6842, 6846, 6858, 6870, 6902, 6903, 6921, 6928, 6938, 6940, 6944, 6947, 6951, 6954, 6967, 6968, 6969, 6972, 6974, 6988, 6989, 6993, 6999, 7006, 7007, 7022, 7027, 7043, 7045, 7046, 7050, 7052, 7054, 7055, 7073, 7087, 7088, 7102, 7112, 7118, 7119, 7122, 7123, 7127, 7144, 7147, 7163, 7165, 7175, 7176, 7185, 7188, 7191, 7192, 7195, 7202, 7209, 7229, 7230, 7236, 7238, 7247, 7255, 7267, 7269, 7273, 7276, 7284, 7290, 7291, 7302, 7310, 7311, 7318, 7319, 7331, 7333, 7352, 7357, 7360, 7364, 7368, 7393, 7399, 7401, 7407, 7413, 7425, 7431, 7467, 7482, 7484, 7485, 7491, 7499, 7514, 7515, 7519, 7524, 7526, 7531, 7532, 7545, 7552, 7554, 7557, 7559, 7564, 7565, 7567, 7569, 7595, 7602, 7612, 7617, 7619, 7620, 7622, 7635, 7637, 7641, 7657, 7659, 7666, 7674, 7692, 7698, 7703, 7710, 7711, 7714, 7723, 7726, 7728, 7731, 7744, 7746, 7756, 7766, 7774, 7779, 7796, 7797, 7802, 7803, 7805, 7821, 7866, 7880, 7898, 7906, 7913, 7922, 7923, 7930, 7931, 7937, 7940, 7948, 7952, 7958, 7961, 7966, 7969, 7974, 7979, 7985, 7993, 7994, 8012, 8020, 8025, 8029, 8048, 8051, 8052, 8069, 8072, 8073, 8075, 8081, 8083, 8095, 8101, 8110, 8115, 8123, 8143, 8162, 8191, 8215, 8233, 8236, 8238, 8243, 8259, 8266, 8270, 8274, 8301, 8318, 8324, 8327, 8336, 8357, 8376, 8382, 8385, 8386, 8392, 8404, 8416, 8418, 8426, 8430, 8431, 8434, 8436, 8442, 8443, 8447, 8450, 8455, 8462, 8463, 8470, 8472, 8482, 8483, 8493, 8521, 8526, 8529, 8533, 8537, 8561, 8564, 8568, 8569, 8578, 8584, 8591, 8607, 8615, 8622, 8623, 8632, 8635, 8636, 8639, 8660, 8676, 8677, 8698, 8707, 8717, 8718, 8730, 8734, 8743, 8749, 8751, 8755, 8766, 8790, 8803, 8804, 8805, 8815, 8818, 8832, 8837, 8838, 8844, 8849, 8852, 8853, 8866, 8876, 8882, 8901, 8910, 8928, 8950, 8959, 8964, 8965, 8970, 8976, 8977, 8980, 8988, 8995, 8996, 9011, 9032, 9034, 9038, 9039, 9045, 9060, 9076, 9077, 9083, 9087, 9089, 9097, 9100, 9105, 9106, 9117, 9118, 9119, 9124, 9134, 9138, 9154, 9155, 9157, 9171, 9192, 9193, 9206, 9232, 9233, 9245, 9246, 9247, 9252, 9253, 9262, 9270, 9301, 9303, 9305, 9310, 9311, 9320, 9323, 9334, 9338, 9346, 9347, 9348, 9352, 9353, 9366, 9370, 9379, 9386, 9393, 9398, 9402, 9426, 9435, 9437, 9438, 9453, 9456, 9461, 9471, 9487, 9494, 9495, 9511, 9519, 9535, 9539, 9549, 9553, 9556, 9562, 9565, 9583, 9584, 9597, 9599, 9611, 9649, 9653, 9656, 9663, 9664, 9678, 9682, 9692, 9693, 9694, 9696, 9702, 9703, 9708, 9715, 9746, 9753, 9761, 9763, 9765, 9780, 9799, 9809, 9828, 9829, 9830, 9834, 9847, 9852, 9854, 9855, 9857, 9863, 9870, 9872, 9877, 9880, 9886, 9888, 9889, 9900, 9904, 9906, 9910, 9914, 9915, 9931, 9938, 9943, 9944, 9961, 9978, 10002, 10012, 10026, 10033, 10036, 10043, 10047, 10059, 10067, 10069, 10073, 10079, 10081, 10085, 10090, 10092, 10099, 10114, 10120, 10134, 10140, 10156, 10159, 10165, 10178, 10194, 10202, 10216, 10230, 10231, 10233, 10238, 10250, 10251, 10253, 10265, 10270, 10275, 10285, 10287, 10289, 10301, 10311, 10317, 10322, 10330, 10341, 10346, 10347, 10353, 10361, 10364, 10368, 10385, 10401, 10408, 10409, 10416, 10417, 10433, 10434, 10446, 10464, 10472, 10478, 10483, 10499, 10510, 10512, 10528, 10530, 10542, 10544, 10546, 10573, 10596, 10601, 10633, 10636, 10646, 10648, 10649, 10669, 10700, 10704, 10719, 10741, 10742, 10757, 10759, 10765, 10772, 10774, 10790, 10794, 10796, 10808, 10821, 10824, 10826, 10832, 10845, 10850, 10856, 10860, 10874, 10880, 10881, 10882, 10894, 10897, 10904, 10907, 10908, 10911, 10917, 10923, 10932, 10940, 10944, 10945, 10958, 10964, 10980, 10992, 10997, 10998, 11004, 11005, 11018, 11022, 11023, 11032, 11053, 11070, 11076, 11082, 11085, 11088, 11089, 11093, 11107, 11129, 11132, 11139, 11158, 11167, 11170, 11171, 11173, 11178, 11184, 11193, 11206, 11216, 11224, 11240, 11243, 11248, 11254, 11268, 11287, 11293, 11317, 11325, 11340, 11342, 11360, 11370, 11388, 11389, 11403, 11405, 11411, 11412, 11413, 11415, 11424, 11440, 11443, 11453, 11469, 11471, 11474, 11476, 11489, 11499, 11506, 11517, 11523, 11526, 11541, 11544, 11558, 11577, 11593, 11600, 11609, 11613, 11620, 11627, 11636, 11641, 11647, 11650, 11658, 11667, 11677, 11684, 11692, 11696, 11709, 11715, 11716, 11717, 11723, 11731, 11734, 11740, 11742, 11755, 11762, 11766, 11777, 11784, 11791, 11812, 11814, 11824, 11829, 11830, 11835, 11837, 11850, 11856, 11868, 11874, 11875, 11876, 11879, 11882, 11889, 11899, 11911, 11913, 11921, 11928, 11932, 11970, 11975, 11978, 11986, 11989, 11995, 11996, 11998, 12000, 12021, 12026, 12029, 12043, 12046, 12053, 12055, 12063, 12074, 12077, 12090, 12095, 12102, 12106, 12126, 12127, 12134, 12137, 12147, 12149, 12151, 12153, 12155, 12159, 12165, 12167, 12181, 12195, 12204, 12208, 12210, 12214, 12220, 12222, 12225, 12255, 12256, 12269, 12282, 12286, 12287, 12290, 12292, 12293, 12300, 12304, 12305, 12321, 12322, 12329, 12331, 12346, 12350, 12353, 12363, 12382, 12385, 12401, 12405, 12408, 12411, 12415, 12424, 12429, 12451, 12462, 12472, 12476, 12490, 12498, 12512, 12515, 12524, 12528, 12534, 12541, 12548, 12549, 12553, 12570, 12576, 12577, 12582, 12588, 12627, 12629, 12631, 12649, 12653, 12671, 12672, 12673, 12690, 12693, 12707, 12717, 12719, 12738, 12742, 12758, 12759, 12764, 12766, 12789, 12826, 12832, 12845, 12847, 12865, 12867, 12868, 12873, 12879, 12894, 12897, 12912, 12914, 12929, 12930, 12943, 12948, 12953, 12956, 12970, 12983, 12988, 12992, 13003, 13004, 13009, 13019, 13023, 13028, 13033, 13037, 13039, 13047, 13055, 13056, 13061, 13064, 13088, 13091, 13100, 13104, 13113, 13126, 13132, 13136, 13150, 13166, 13172, 13174, 13178, 13187, 13193, 13207, 13209, 13219, 13221, 13224, 13226, 13228, 13232, 13235, 13241, 13243, 13252, 13263, 13273, 13275, 13279, 13285, 13288, 13290, 13294, 13297, 13298, 13304, 13305, 13318, 13319, 13320, 13321, 13337, 13388, 13392, 13394, 13396, 13403, 13417, 13431, 13439, 13446, 13450, 13459, 13461, 13482, 13484, 13485, 13489, 13490, 13491, 13492, 13497, 13501, 13502, 13505, 13507, 13510, 13513, 13535, 13542, 13557, 13563, 13565, 13584, 13611, 13614, 13615, 13629, 13635, 13636, 13641, 13646, 13650, 13652, 13658, 13662, 13663, 13665, 13669, 13677, 13680, 13683, 13688, 13698, 13702, 13703, 13714, 13720, 13731, 13744, 13747, 13764, 13768, 13791, 13809, 13847, 13858, 13862, 13863, 13870, 13874, 13875, 13879, 13884, 13885, 13888, 13898, 13899, 13901, 13912, 13916, 13918, 13920, 13935, 13941, 13952, 13955, 13963, 13966, 13980, 13982, 13984, 13986, 13989, 13993, 13994, 13996, 13997, 14004, 14021, 14022, 14057, 14061, 14062, 14065, 14070, 14072, 14073, 14074, 14075, 14079, 14081, 14082, 14086, 14088, 14089, 14097, 14098, 14104, 14112, 14143, 14158, 14161, 14167, 14172, 14177, 14180, 14187, 14191, 14197, 14198, 14202, 14208, 14210, 14213, 14214, 14220, 14238, 14249, 14251, 14254, 14256, 14278, 14286, 14289, 14291, 14300, 14305, 14310, 14315, 14322, 14323, 14327, 14334, 14338, 14340, 14341, 14342, 14350, 14351, 14353, 14356, 14360, 14365, 14373, 14376, 14394, 14397, 14403, 14420, 14428, 14434, 14445, 14453, 14462, 14468, 14473, 14476, 14484, 14487, 14496, 14498, 14503, 14518, 14523, 14524, 14527, 14528, 14530, 14531, 14533, 14536, 14543, 14549, 14552, 14555, 14563, 14566, 14587, 14591, 14602, 14608, 14633, 14637, 14641, 14650, 14653, 14665, 14673, 14679, 14680, 14706, 14713, 14723, 14724, 14730, 14743, 14746, 14752, 14759, 14760, 14762, 14763, 14771, 14772, 14793, 14804, 14815, 14823, 14826, 14855, 14861, 14863, 14868, 14880, 14886, 14900, 14917, 14942, 14957, 14958, 14959, 14964, 14971, 14982, 14986, 14991, 14993, 14995, 14996, 14999, 15001, 15004, 15022, 15037, 15044, 15045, 15046, 15047, 15077, 15085, 15086, 15093, 15099, 15105, 15124, 15132, 15135, 15147, 15154, 15167, 15169, 15180, 15188, 15189, 15191, 15194, 15195, 15198, 15221, 15233, 15234, 15236, 15242, 15244, 15248, 15250, 15253, 15257, 15258, 15269, 15276, 15281, 15302, 15314, 15327, 15328, 15329, 15331, 15333, 15334, 15342, 15351, 15358, 15360, 15362, 15370, 15386, 15389, 15392, 15398, 15404, 15405, 15413, 15416, 15423, 15426, 15428, 15429, 15454, 15470, 15487, 15492, 15494, 15499, 15503, 15507, 15514, 15533, 15546, 15564, 15578, 15579, 15584, 15608, 15619, 15624, 15633, 15653, 15654, 15659, 15672, 15674, 15680, 15682, 15694, 15696, 15700, 15713, 15721, 15722, 15728, 15733, 15737, 15751, 15757, 15764, 15775, 15778, 15780, 15786, 15800, 15801, 15813, 15816, 15817, 15819, 15834, 15836, 15842, 15851, 15854, 15868, 15870, 15880, 15886, 15890, 15899, 15932, 15940, 15942, 15961, 15974, 15976, 15985, 15987, 15989, 15993, 16005, 16013, 16017, 16020, 16021, 16023, 16024, 16038, 16039, 16043, 16051, 16056, 16063, 16069, 16071, 16077, 16100, 16105, 16110, 16114, 16115, 16121, 16126, 16146, 16149, 16152, 16158, 16168, 16179, 16189, 16202, 16204, 16207, 16211, 16217, 16228, 16238, 16245, 16249, 16266, 16283, 16285, 16286, 16291, 16294, 16296, 16306, 16325, 16329, 16340, 16347, 16352, 16365, 16382, 16389, 16394, 16399, 16400, 16403, 16414, 16416, 16420, 16431, 16440, 16441, 16458, 16480, 16498, 16502, 16513, 16520, 16524, 16529, 16530, 16533, 16555, 16556, 16561, 16569, 16592, 16601, 16634, 16636, 16641, 16647, 16648, 16650, 16663, 16687, 16691, 16692, 16707, 16718, 16721, 16722, 16724, 16729, 16736, 16740, 16743, 16750, 16752, 16762, 16792, 16803, 16809, 16810, 16811, 16813, 16824, 16841, 16844, 16848, 16875, 16876, 16888, 16889, 16899, 16929, 16940, 16946, 16948, 16967, 16980, 16982, 16984, 16990, 16995, 17005, 17020, 17034, 17038, 17044, 17049, 17050, 17071, 17072, 17073, 17084, 17090, 17092, 17107, 17127, 17130, 17138, 17151, 17152, 17153, 17154, 17158, 17160, 17168, 17200, 17202, 17208, 17218, 17223, 17228, 17246, 17251, 17262, 17267, 17271, 17293, 17313, 17316, 17322, 17338, 17341, 17350, 17367, 17368, 17371, 17377, 17380, 17384, 17385, 17419, 17421, 17426, 17435, 17436, 17439, 17448, 17450, 17457, 17474, 17480, 17484, 17492, 17501, 17515, 17519, 17521, 17524, 17527, 17530, 17538, 17540, 17542, 17544, 17545, 17554, 17558, 17560, 17589, 17602, 17603, 17610, 17612, 17615, 17622, 17635, 17643, 17649, 17650, 17666, 17675, 17676, 17681, 17693, 17697, 17714, 17719, 17725, 17726, 17728, 17740, 17758, 17769, 17773, 17777, 17794, 17796, 17800, 17824, 17826, 17844, 17850, 17851, 17853, 17862, 17864, 17865, 17867, 17879, 17883, 17896, 17915, 17917, 17919, 17921, 17927, 17943, 17945, 17949, 17978, 17982, 17991, 17996, 17999, 18005, 18010, 18011, 18022, 18028, 18034, 18035, 18043, 18058, 18063, 18067, 18069, 18080, 18085, 18098, 18103, 18125, 18128, 18136, 18140, 18141, 18146, 18148, 18155, 18157, 18161, 18163, 18180, 18181, 18190, 18193, 18200, 18207, 18220, 18223, 18230, 18231, 18232, 18233, 18245, 18246, 18268, 18270, 18272, 18273, 18285, 18290, 18304, 18308, 18313, 18316, 18321, 18341, 18349, 18352, 18356, 18357, 18364, 18372, 18382, 18386, 18387, 18388, 18396, 18398, 18408, 18410, 18414, 18426, 18434, 18439, 18448, 18450, 18458, 18461, 18469, 18470, 18487, 18516, 18529, 18536, 18537, 18542, 18551, 18562, 18575, 18581, 18583, 18606, 18608, 18610, 18616, 18630, 18639, 18640, 18642, 18651, 18660, 18665, 18667, 18669, 18672, 18674, 18683, 18685, 18686, 18697, 18707, 18723, 18747, 18748, 18749, 18757, 18766, 18774, 18793, 18795, 18801, 18806, 18815, 18832, 18833, 18836, 18837, 18848, 18854, 18880, 18883, 18890, 18891, 18913, 18943, 18944, 18946, 18948, 18954, 18958, 18962, 18966, 18971, 18977, 18978, 18986, 18988, 18999, 19006, 19011, 19013, 19022, 19025, 19041, 19046, 19048, 19057, 19058, 19060, 19068, 19079, 19084, 19086, 19097, 19099, 19111, 19115, 19116, 19122, 19125, 19126, 19166, 19181, 19201, 19202, 19214, 19217, 19225, 19228, 19236, 19249, 19257, 19258, 19260, 19264, 19284, 19289, 19291, 19295, 19301, 19306, 19314, 19322, 19326, 19329, 19330, 19331, 19342, 19357, 19367, 19369, 19376, 19386, 19393, 19403, 19407, 19413, 19415, 19416, 19418, 19442, 19458, 19467, 19471, 19476, 19482, 19496, 19500, 19513, 19518, 19523, 19530, 19541, 19544, 19547, 19548, 19556, 19571, 19595, 19613, 19621, 19650, 19651, 19654, 19660, 19661, 19669, 19677, 19680, 19683, 19686, 19687, 19709, 19713, 19715, 19719, 19724, 19729, 19733, 19740, 19747, 19748, 19759, 19762, 19763, 19765, 19770, 19776, 19781, 19783, 19788, 19794, 19795, 19800, 19812, 19813, 19826, 19842, 19852, 19864, 19875, 19889, 19894, 19906, 19917, 19920, 19931, 19937, 19942, 19945, 19978, 19984, 19991, 19995, 19999, 20002, 20011, 20024, 20025, 20029, 20030, 20036, 20037, 20040, 20041, 20042, 20058, 20065, 20075, 20076, 20077, 20083, 20090, 20091, 20100, 20104, 20106, 20119, 20124, 20153, 20158, 20162, 20165, 20169, 20187, 20194, 20198, 20199, 20203, 20217, 20218, 20230, 20231, 20233, 20238, 20239, 20245, 20249, 20268, 20269, 20270, 20272, 20274, 20275, 20282, 20297, 20305, 20310, 20311, 20323, 20324, 20331, 20333, 20336, 20340, 20346, 20357, 20367, 20374, 20375, 20381, 20397, 20400, 20414, 20416, 20417, 20425, 20431, 20441, 20445, 20446, 20457, 20473, 20481, 20482, 20497, 20501, 20504, 20507, 20520, 20531, 20533, 20545, 20555, 20560, 20562, 20564, 20568, 20572, 20581, 20594, 20595, 20602, 20604, 20616, 20625, 20627, 20652, 20660, 20665, 20676, 20679, 20683, 20685, 20686, 20704, 20710, 20714, 20717, 20726, 20731, 20743, 20749, 20765, 20774, 20778, 20786, 20791, 20793, 20810, 20815, 20823, 20827, 20842, 20847, 20851, 20856, 20858, 20868, 20870, 20887, 20888, 20898, 20899, 20904, 20906, 20917, 20920, 20925, 20929, 20936, 20937, 20942, 20945, 20951, 20962, 20965, 20970, 20976, 20986, 20997, 21000, 21002, 21008, 21009, 21033, 21039, 21041, 21043, 21057, 21062, 21069, 21070, 21084, 21085, 21088, 21089, 21107, 21123, 21140, 21149, 21153, 21163, 21164, 21174, 21175, 21179, 21196, 21201, 21207, 21211, 21216, 21219, 21225, 21226, 21236, 21239, 21245, 21250, 21252, 21261, 21262, 21269, 21277, 21287, 21288, 21294, 21297, 21303, 21308, 21312, 21326, 21331, 21338, 21341, 21342, 21363, 21370, 21374, 21389, 21397, 21406, 21409, 21413, 21416, 21422, 21427, 21428, 21432, 21437, 21449, 21469, 21473, 21479, 21491, 21509, 21525, 21526, 21527, 21547, 21555, 21558, 21564, 21566, 21567, 21587, 21589, 21592, 21593, 21597, 21607, 21615, 21638, 21648, 21679, 21686, 21698, 21702, 21714, 21725, 21730, 21732, 21733, 21743, 21749, 21753, 21766, 21769, 21775, 21780, 21793, 21795, 21804, 21805, 21810, 21821, 21822, 21823, 21836, 21846, 21851, 21858, 21868, 21869, 21870, 21873, 21886, 21900, 21902, 21904, 21906, 21909, 21915, 21917, 21934, 21935, 21940, 21945, 21949, 21953, 21955, 21968, 22026, 22030, 22032, 22033, 22037, 22042, 22054, 22063, 22069, 22082, 22083, 22084, 22089, 22091, 22101, 22105, 22106, 22107, 22117, 22131, 22136, 22139, 22161, 22169, 22174, 22184, 22195, 22209, 22212, 22216, 22223, 22229, 22231, 22233, 22238, 22261, 22267, 22268, 22273, 22279, 22280, 22282, 22285, 22288, 22301, 22303, 22304, 22321, 22334, 22339, 22340, 22344, 22345, 22353, 22384, 22403, 22408, 22412, 22421, 22424, 22431, 22445, 22449, 22458, 22461, 22472, 22479, 22485, 22492, 22496, 22501, 22503, 22523, 22527, 22533, 22536, 22538, 22541, 22543, 22545, 22551, 22559, 22562, 22573, 22576, 22594, 22599, 22603, 22615, 22616, 22620, 22623, 22624, 22625, 22644, 22648, 22659, 22665, 22675, 22681, 22690, 22697, 22709, 22735, 22740, 22742, 22743, 22749, 22768, 22777, 22787, 22799, 22800, 22802, 22822, 22838, 22847, 22858, 22862, 22863, 22867, 22868, 22875, 22884, 22886, 22890, 22891, 22906, 22908, 22921, 22923, 22936, 22938, 22940, 22944, 22945, 22946, 22950, 22972, 22974, 22979, 22983, 22992, 23000, 23004, 23027, 23050, 23056, 23065, 23066, 23068, 23071, 23075, 23081, 23106, 23111, 23115, 23116, 23125, 23126, 23132, 23138, 23140, 23142, 23151, 23153, 23157, 23180, 23191, 23205, 23220, 23221, 23235, 23240, 23245, 23246, 23248, 23254, 23287, 23292, 23294, 23314, 23319, 23320, 23341, 23345, 23354, 23370, 23398, 23400, 23407, 23411, 23418, 23424, 23458, 23462, 23466, 23498, 23501, 23513, 23517, 23518, 23526, 23565, 23569, 23589, 23616, 23617, 23619, 23621, 23626, 23628, 23634, 23635, 23637, 23651, 23663, 23667, 23688, 23690, 23701, 23721, 23724, 23731, 23744, 23745, 23748, 23758, 23759, 23769, 23772, 23777, 23779, 23788, 23800, 23801, 23808, 23820, 23822, 23830, 23832, 23839, 23841, 23843, 23849, 23850, 23877, 23887, 23900, 23905, 23906, 23919, 23924, 23933, 23934, 23943, 23954, 23956, 23958, 23959, 23964, 23997, 24008, 24011, 24013, 24023, 24038, 24046, 24054, 24058, 24065, 24072, 24076, 24082, 24087, 24088, 24094, 24118, 24125, 24133, 24163, 24174, 24175, 24191, 24196, 24199, 24203, 24220, 24224, 24230, 24240, 24246, 24251, 24254, 24277, 24280, 24282, 24284, 24290, 24296, 24317, 24318, 24334, 24340, 24372, 24373, 24377, 24378, 24380, 24381, 24388, 24390, 24401, 24402, 24410, 24415, 24440, 24443, 24447, 24453, 24456, 24468, 24469, 24470, 24471, 24472, 24478, 24480, 24487, 24495, 24507, 24509, 24515, 24524, 24526, 24542, 24556, 24560, 24561, 24565, 24566, 24570, 24583, 24591, 24594, 24609, 24611, 24614, 24618, 24625, 24632, 24657, 24658, 24665, 24678, 24683, 24689, 24691, 24693, 24697, 24700, 24705, 24713, 24718, 24729, 24732, 24744, 24751, 24752, 24753, 24757, 24761, 24772, 24791, 24794, 24806, 24814, 24816, 24818, 24820, 24822, 24833, 24846, 24856, 24859, 24871, 24875, 24877, 24879, 24887, 24892, 24896, 24910, 24921, 24923, 24925, 24941, 24946, 24947, 24971, 24974, 24983, 24987, 25004, 25010, 25034, 25049, 25052, 25058, 25074, 25088, 25090, 25093, 25094, 25097, 25102, 25114, 25126, 25129, 25139, 25151, 25166, 25172, 25180, 25188, 25192, 25193, 25197, 25198, 25204, 25210, 25215, 25217, 25241, 25246, 25268, 25274, 25277, 25278, 25291, 25293, 25305, 25311, 25313, 25318, 25319, 25323, 25327, 25343, 25349, 25353, 25365, 25368, 25373, 25382, 25385, 25388, 25396, 25405, 25414, 25427, 25434, 25437, 25444, 25447, 25451, 25454, 25467, 25468, 25482, 25492, 25495, 25499, 25508, 25515, 25518, 25519, 25529, 25548, 25549, 25554, 25565, 25568, 25570, 25576, 25582, 25585, 25593, 25597, 25604, 25606, 25628, 25643, 25666, 25667, 25668, 25674, 25682, 25686, 25689, 25697, 25710, 25711, 25714, 25719, 25721, 25726, 25730, 25736, 25744, 25746, 25751, 25772, 25777, 25778, 25814, 25815, 25823, 25825, 25835, 25839, 25842, 25844, 25849, 25851, 25873, 25874, 25880, 25883, 25885, 25890, 25899, 25902, 25908, 25918, 25921, 25924, 25931, 25951, 25953, 25954, 25957, 25966, 25974, 25980, 25985, 25990, 25993, 26007, 26022, 26029, 26033, 26043, 26047, 26089, 26099, 26102, 26110, 26137, 26140, 26156, 26158, 26160, 26169, 26177, 26183, 26187, 26195, 26200, 26205, 26223, 26228, 26235, 26238, 26245, 26246, 26256, 26266, 26277, 26283, 26286, 26296, 26306, 26315, 26319, 26324, 26328, 26334, 26341, 26342, 26343, 26351, 26375, 26382, 26404, 26411, 26417, 26420, 26425, 26431, 26452, 26459, 26461, 26464, 26479, 26483, 26488, 26494, 26497, 26501, 26520, 26527, 26533, 26535, 26537, 26540, 26541, 26558, 26568, 26573, 26578, 26589, 26600, 26601, 26602, 26617, 26633, 26640, 26641, 26654, 26657, 26664, 26668, 26669, 26675, 26687, 26692, 26699, 26707, 26721, 26724, 26726, 26729, 26740, 26745, 26757, 26766, 26774, 26781, 26793, 26806, 26818, 26846, 26847, 26848, 26856, 26862, 26866, 26877, 26883, 26888, 26890, 26894, 26895, 26911, 26917, 26920, 26930, 26932, 26942, 26959, 26992, 27000, 27005, 27021, 27022, 27024, 27026, 27040, 27047, 27050, 27065, 27070, 27072, 27073, 27123, 27134, 27145, 27148, 27151, 27156, 27159, 27162, 27171, 27188, 27191, 27201, 27202, 27203, 27205, 27224, 27226, 27231, 27246, 27253, 27254, 27255, 27265, 27269, 27276, 27291, 27292, 27296, 27308, 27326, 27336, 27357, 27370, 27372, 27386, 27393, 27419, 27432, 27443, 27449, 27452, 27455, 27471, 27478, 27480, 27491, 27497, 27501, 27505, 27509, 27510, 27530, 27535, 27546, 27555, 27559, 27560, 27562, 27573, 27574, 27593, 27602, 27603, 27604, 27611, 27614, 27616, 27621, 27630, 27637, 27639, 27642, 27648, 27649, 27659, 27664, 27673, 27675, 27682, 27688, 27689, 27696, 27709, 27734, 27735, 27737, 27738, 27746, 27757, 27765, 27766, 27783, 27786, 27796, 27797, 27804, 27821, 27826, 27828, 27839, 27846, 27867, 27868, 27872, 27881, 27884, 27891, 27910, 27913, 27921, 27922, 27924, 27937, 27952, 27965, 27978, 27981, 27983, 27992, 28002, 28015, 28022, 28025, 28030, 28038, 28040, 28047, 28077, 28098, 28102, 28118, 28130, 28139, 28148, 28149, 28160, 28162, 28163, 28171, 28173, 28176, 28185, 28191, 28206, 28209, 28255, 28262, 28263, 28279, 28280, 28290, 28300, 28324, 28330, 28333, 28335, 28339, 28347, 28350, 28359, 28363, 28365, 28369, 28370, 28376, 28381, 28392, 28395, 28403, 28412, 28416, 28420, 28431, 28434, 28440, 28447, 28454, 28469, 28471, 28497, 28500, 28506, 28525, 28530, 28539, 28543, 28556, 28567, 28577, 28582, 28593, 28605, 28612, 28622, 28623, 28629, 28630, 28631, 28644, 28647, 28650, 28652, 28657, 28659, 28660, 28677, 28678, 28692, 28694, 28695, 28721, 28732, 28742, 28747, 28763, 28770, 28787, 28798, 28812, 28819, 28834, 28840, 28848, 28854, 28858, 28868, 28872, 28877, 28882, 28946, 28953, 28954, 28957, 28960, 28968, 28969, 28972, 28980, 28982, 28996, 28998, 29000, 29013, 29015, 29033, 29036, 29041, 29049, 29052, 29055, 29056, 29061, 29066, 29069, 29078, 29094, 29102, 29104, 29119, 29139, 29161, 29166, 29169, 29176, 29187, 29191, 29195, 29206, 29218, 29224, 29229, 29231, 29248, 29259, 29268, 29281, 29283, 29289, 29296, 29305, 29318, 29328, 29330, 29344, 29351, 29352, 29362, 29363, 29367, 29385, 29387, 29389, 29395, 29415, 29419]
        val_data_index =  [9, 13, 14, 22, 29, 31, 33, 49, 57, 58, 62, 71, 82, 83, 85, 90, 105, 122, 125, 161, 166, 170, 174, 177, 186, 191, 197, 200, 210, 216, 224, 227, 269, 273, 282, 284, 322, 331, 339, 341, 345, 351, 354, 364, 368, 373, 377, 392, 406, 423, 428, 435, 440, 448, 449, 457, 482, 484, 485, 504, 511, 515, 523, 527, 538, 542, 551, 553, 554, 559, 561, 570, 574, 580, 586, 594, 607, 615, 633, 652, 661, 666, 726, 727, 728, 737, 746, 760, 764, 771, 778, 781, 782, 808, 811, 812, 816, 819, 825, 834, 838, 844, 855, 864, 894, 897, 905, 921, 926, 929, 941, 957, 960, 969, 973, 1015, 1034, 1045, 1048, 1054, 1055, 1057, 1062, 1069, 1100, 1116, 1117, 1121, 1127, 1132, 1135, 1142, 1143, 1148, 1149, 1181, 1183, 1189, 1190, 1192, 1202, 1212, 1231, 1238, 1239, 1242, 1244, 1245, 1246, 1256, 1257, 1261, 1265, 1284, 1294, 1303, 1309, 1314, 1317, 1319, 1321, 1344, 1356, 1376, 1387, 1392, 1395, 1406, 1410, 1431, 1450, 1464, 1474, 1479, 1481, 1500, 1501, 1515, 1518, 1520, 1543, 1550, 1555, 1559, 1568, 1570, 1592, 1598, 1615, 1616, 1622, 1633, 1636, 1642, 1643, 1653, 1657, 1662, 1663, 1669, 1676, 1680, 1684, 1686, 1688, 1694, 1704, 1712, 1726, 1728, 1740, 1755, 1765, 1778, 1791, 1801, 1802, 1811, 1816, 1820, 1823, 1827, 1833, 1836, 1854, 1855, 1856, 1863, 1864, 1868, 1876, 1895, 1919, 1922, 1924, 1930, 1941, 1949, 1953, 1960, 1985, 2004, 2011, 2012, 2021, 2034, 2046, 2049, 2050, 2053, 2061, 2096, 2105, 2107, 2115, 2137, 2144, 2148, 2154, 2161, 2163, 2169, 2186, 2198, 2199, 2211, 2214, 2216, 2217, 2236, 2245, 2246, 2253, 2266, 2287, 2295, 2328, 2340, 2345, 2352, 2372, 2382, 2386, 2401, 2409, 2417, 2420, 2424, 2426, 2428, 2440, 2448, 2449, 2462, 2473, 2476, 2484, 2487, 2515, 2519, 2539, 2542, 2553, 2556, 2559, 2562, 2569, 2570, 2575, 2581, 2593, 2602, 2604, 2615, 2620, 2627, 2631, 2642, 2648, 2656, 2657, 2666, 2669, 2685, 2689, 2695, 2734, 2745, 2748, 2751, 2759, 2761, 2763, 2766, 2768, 2770, 2772, 2780, 2788, 2793, 2801, 2808, 2816, 2829, 2840, 2845, 2856, 2866, 2874, 2875, 2879, 2895, 2899, 2902, 2906, 2909, 2921, 2924, 2935, 2942, 2945, 2956, 2957, 2959, 2961, 2963, 2971, 2973, 2986, 2994, 3008, 3009, 3038, 3060, 3073, 3074, 3079, 3090, 3102, 3106, 3134, 3142, 3152, 3155, 3159, 3180, 3185, 3186, 3192, 3199, 3227, 3228, 3229, 3236, 3243, 3261, 3263, 3267, 3280, 3284]

        def make_dataset_from_index(all_dataset, indexs):
            r = []
            for i in all_dataset:
                if i[3] in indexs:
                    r.append(i)
            return r

        train_data = make_dataset_from_index(train_data, trn_data_index)
        val_data = make_dataset_from_index(val_data, val_data_index)



        #word embedding
        word_embeds = data['embed'] if args.use_pretrained_word_embedding else None

        word_vocab_size = len(data['vocab'][1])

        print(' The total amount of training data：%d\n' %len(train_data),   # Total number of training samples (number of question answer pair)
              'The total amount of val data：%d\n' %len(val_data),
              'The total amount of test data：%d' %len(val_data))

        acquisition_function = Acquisition(train_data,
                                            seed=warm_start_random_seed,
                                            cuda_device=args.device[0],
                                            batch_size=args.sampling_batch_size,
                                            submodular_k=config["submodular_k"])

        checkpoint_path = os.path.join(args.result_path, 'active_checkpoint', config["group_name"], sample_method)
        if not os.path.exists(checkpoint_path):
            os.makedirs(checkpoint_path)

        method_result = []  # Record the performance results of each method during active learning
        ####################################### acquire data and retrain ###########################################
        for i in range(num_acquisitions_round):

            print("current round：{}".format(i))

            #-------------------acquisition---------------------
            if i == 0:#first round
                acq = init_question_num
                a_m = "random"
                m_p = ""
            else:
                acq = acquire_question_num_per_round
                a_m = acquire_method
                m_p = os.path.join(checkpoint_path, 'modelweights')

            acquisition_function.obtain_data(train_data,
                                             model_path=m_p,
                                             model_name=model_name,
                                             acquire_num=acq,
                                             method=a_m,
                                             sub_method=sub_acquire_method,
                                             unsupervised_method=config["unsupervised_method"],
                                             round = i)

            # -------------------prepare training data---------------------
            '''
            train_data format：
            {
                'str_words_q': str_words_q,  # question word segmentation
                'str_words_a': str_words_a,  # answer word segmentation
                'words_q': words_q,  # question word id
                'words_a': words_a,  # answer word id
                'tag': tag,  # sample tag id
            }
            '''

            new_train_index = (acquisition_function.train_index).copy()
            sorted_train_index = list(new_train_index)
            sorted_train_index.sort()
            labeled_train_data = [train_data[i] for i in sorted_train_index]

            print("Labeled training samples: {}".format(len(acquisition_function.train_index)))

            # -------------------------------------train--------------------------------------


            print('.............Recreate the model...................')
            if model_name == 'BiLSTM':
                    model = BiLSTM(word_vocab_size,
                                   args.word_embedding_dim,
                                   args.word_hidden_dim,
                                   args.target_size,
                                   pretrained=word_embeds,
                                   with_sim_features=args.with_sim_feature,
                                   cuda_device=args.device[0],
                                   )
            if model_name == 'CNN':
                    model = CNN(word_vocab_size,
                                args.word_embedding_dim,
                                args.word_out_channels,
                                args.target_size,
                                pretrained=word_embeds,
                                cuda_device=args.device[0],)

            model.cuda(args.device[0])

            trainer = Trainer(model,
                              args.result_path,
                              model_name,
                              eval_begin=1,
                              cuda_device=args.device[0],
                              top_k= args.top_k
                              )

            test_performance = trainer.train_supervisedLearning(args.num_epochs,
                                                                labeled_train_data,
                                                                val_data,
                                                                args.learning_rate,
                                                                checkpoint_path=checkpoint_path,
                                                                batch_size=args.batch_size
                                                                )

            print('.' * 50)
            print("Test performance: {}".format(test_performance))
            print('*' * 50)

            #--------------------------Send data for a visual web page------------------------------
            max_performance = config["max_performance"] if "max_performance" in config else 0

            # if "group_name" in config:
            #     updateLineChart(str(test_performance), sample_method, gp_name=config["group_name"], max=max_performance)
            # else:
            #     updateLineChart(str(test_performance), sample_method, max=max_performance)

            method_result.append(test_performance)
            # with open('result.txt', 'a') as f:
            #     print("acq round {} : \t {}"
            #           .format(i,test_performance),
            #           file=f)

        print("acquire_method: {}，sub_acquire_method: {}, warm_start_random_seed{}"
              .format(acquire_method, sub_acquire_method, warm_start_random_seed))
        print(method_result)
        # with open('result.txt','a') as f:
        #     print("acquire_method: {}，sub_acquire_method: {}, warm_start_random_seed{}"
        #           .format(acquire_method, sub_acquire_method, warm_start_random_seed),
        #           file=f )
        #     print(method_result, file=f )
        #     print('', file=f)

        allMethods_results.append(method_result)
        shutil.rmtree(checkpoint_path)
    print(allMethods_results)

if __name__ == "__main__":
    args = parse_args()
    main(args)
